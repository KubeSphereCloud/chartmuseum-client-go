// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIChartsNameVersion(params *DeleteAPIChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPIChartsNameVersionOK, error)

	GetAPICharts(params *GetAPIChartsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIChartsOK, error)

	GetAPIChartsName(params *GetAPIChartsNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIChartsNameOK, error)

	GetAPIChartsNameVersion(params *GetAPIChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIChartsNameVersionOK, error)

	GetChartsFilename(params *GetChartsFilenameParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetChartsFilenameOK, error)

	PostAPICharts(params *PostAPIChartsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIChartsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIChartsNameVersion deletes chart version
*/
func (a *Client) DeleteAPIChartsNameVersion(params *DeleteAPIChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPIChartsNameVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIChartsNameVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIChartsNameVersion",
		Method:             "DELETE",
		PathPattern:        "/api/charts/{name}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAPIChartsNameVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIChartsNameVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAPIChartsNameVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAPICharts lists all charts
*/
func (a *Client) GetAPICharts(params *GetAPIChartsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIChartsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIChartsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICharts",
		Method:             "GET",
		PathPattern:        "/api/charts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPIChartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIChartsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAPIChartsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAPIChartsName lists chart versions
*/
func (a *Client) GetAPIChartsName(params *GetAPIChartsNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIChartsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIChartsNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIChartsName",
		Method:             "GET",
		PathPattern:        "/api/charts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPIChartsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIChartsNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAPIChartsNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAPIChartsNameVersion gets chart info by version
*/
func (a *Client) GetAPIChartsNameVersion(params *GetAPIChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIChartsNameVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIChartsNameVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIChartsNameVersion",
		Method:             "GET",
		PathPattern:        "/api/charts/{name}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPIChartsNameVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIChartsNameVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAPIChartsNameVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetChartsFilename downloads chart package tgz or prov file
*/
func (a *Client) GetChartsFilename(params *GetChartsFilenameParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetChartsFilenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChartsFilenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetChartsFilename",
		Method:             "GET",
		PathPattern:        "/charts/{filename}",
		ProducesMediaTypes: []string{"application/octet-stream", "application/pgp-signature", "application/x-tar"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartsFilenameReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChartsFilenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetChartsFilenameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAPICharts uploads a chart package or prov file
*/
func (a *Client) PostAPICharts(params *PostAPIChartsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIChartsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIChartsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPICharts",
		Method:             "POST",
		PathPattern:        "/api/charts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAPIChartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIChartsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAPIChartsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
